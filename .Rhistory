xseq   <- seq(-6, 6, length.out = 2001)
lines(xseq, tp(xseq,gamma=1.5,nu=1), col = "red", lwd = 3, lty=1)
lines(xseq, tp(xseq,gamma=3,nu=3), col = "darkgreen", lwd = 3, lty=2)
lines(xseq, tp_n(xseq,gamma=1.5), col="royalblue",lwd=3,lty=3)
lines(xseq, tp_n(xseq,gamma=3), col="orange",lwd=3,lty=4)
lines(xseq, dnorm(xseq), col="black",lwd=3,lty=5)
legend("topright", inset = 0.04, cex   = 0.8,
legend = c(expression(paste(gamma, " = 1.5, ", nu, " = 1")),
expression(paste(gamma, " = 3,   ", nu, " = 3")),
expression(paste(gamma, " = 1.5, ", nu, " = ", infinity)),
expression(paste(gamma, " = 3,   ", nu, " = ", infinity)),
expression(N(0,1))),
col = c("red", "darkgreen", "royalblue", "orange", "black"),
lty = 1:5,
lwd = 3,
bty = "n")
plot(NA, xlim = range(xseq), ylim = c(0, 0.42),
xlab = "x", ylab = "Density",
main = "")
xseq   <- seq(-6, 6, length.out = 2001)
lines(xseq, tp(xseq,gamma=2/3,nu=1), col = "red", lwd = 3, lty=1)
lines(xseq, tp(xseq,gamma=1/3,nu=3), col = "darkgreen", lwd = 3, lty=2)
lines(xseq, tp_n(xseq,gamma=2/3), col="royalblue",lwd=3,lty=3)
lines(xseq, tp_n(xseq,gamma=1/3), col="orange",lwd=3,lty=4)
lines(xseq, dnorm(xseq), col="black",lwd=3,lty=5)
legend("topright", inset = 0.04, cex   = 0.8,
legend = c(expression(paste(gamma, " = 2/3, ", nu, " = 1")),
expression(paste(gamma, " = 1/3,   ", nu, " = 3")),
expression(paste(gamma, " = 2/3, ", nu, " = ", infinity)),
expression(paste(gamma, " = 1/3,   ", nu, " = ", infinity)),
expression(N(0,1))),
col = c("red", "darkgreen", "royalblue", "orange", "black"),
lty = 1:5,
lwd = 3,
bty = "n")
library(FlexBayesMed)
######           This corresponds to Figure 2           ######
library(FlexBayesMed)
gamma_seq <- seq(0.25, 3, length.out = 200)
# Skewness for nu=5
sk_nu5   <- skewness_matpt(gamma_seq, 5)
gamma_seq <- seq(0.25, 3, length.out = 200)
# Skewness for nu=5
sk_nu5   <- sapply(gamma_seq, function(g) skewness_matpt(g, 5))
# Skewness for nu=10
sk_nu10  <- sapply(gamma_seq, function(g) skewness_matpt(g, 10))
# Skewness for two-piece normal
sk_infty <- sapply(gamma_seq, function(g) skewness_matpt(g, "normal"))
plot(gamma_seq, sk_nu5,
type = "l",
col = "blue", lwd = 2.5, lty=1,
ylim = range(c(sk_nu5, sk_nu10, sk_infty)),
xlab = expression(gamma),
ylab = expression(paste("SK(X|",gamma,",",nu,")")),
main = "")
lines(gamma_seq, sk_nu10, col = "red",  lty=2, lwd = 2.5)
lines(gamma_seq, sk_infty, col = "darkgreen", lty=3, lwd = 2.5)
legend("bottomright",cex=1.2, inset=0.04,
legend = c(expression(nu==5), expression(nu==10), expression(nu==infinity)),
col = c("blue", "red", "darkgreen"), lty = c(1,2,3), lwd = 2.5,
bty = "n")
library(FlexBayesMed)
?rmatpt
c(3, 10, "normal")
list(3, 10, "normal")
##################################
###   Simulation (Section 5)   ###
##################################
# Load the FlexBayesMed package
library(FlexBayesMed)
set.seed(123)
# The following four functions convert standardised coefficients into unstandardised coefficients
# Please refer to Section B in the Supplementary Materials
H <- function(gamma, nu){
return((nu/(nu-2)) * (gamma^2 - 1 + (1/(gamma^2))) - f(gamma, nu)^2)
}
coef_1 <- function(stand_alpha,gamma_1,nu_1){ # Convert unstandardised alpha
H1 <- H(gamma_1,nu_1)
s2 <- H1/((1/(stand_alpha^2))-1)
return(sqrt(s2))
}
coef_2 <- function(stand_beta,stand_alpha,stand_tau,gamma_1,nu_1,gamma_2,nu_2){ # Convert unstandardised beta
H1 <- H(gamma_1,nu_1)
H2 <- H(gamma_2,nu_2)
alpha <- coef_1(stand_alpha,gamma_1,nu_1)
K <- alpha^2 + H1
l1 <- K*(1-stand_tau^2)/(H2*(stand_beta^2))
l2 <- K/H2
s2 <- 1/(l1-l2)
return(sqrt(s2))
}
coef_tau <- function(stand_beta,stand_tau,gamma_2,nu_2){ # Convert unstandardised tau
H2 <- H(gamma_2,nu_2)
tau <- stand_tau * sqrt(H2/(1 - (stand_tau)^2 - (stand_beta)^2))
return(tau)
}
coef_1(0.14, 0.33, 3)
# Load the FlexBayesMed package
library(FlexBayesMed)
set.seed(123)
# The following five functions convert standardised coefficients into unstandardised coefficients
# Please refer to Section B in the Supplementary Materials
library(Rmpfr)
f <- function(ga,nu){
nu_mpfr <- mpfr(nu, precBits=512)
log_numerator <- log(2) + log(nu_mpfr) + lgamma((nu_mpfr + 1)/2)
log_denominator <- 0.5 * (log(pi) + log(nu_mpfr)) + log(nu_mpfr - 1) + lgamma(nu_mpfr/2)
log_ratio <- log_numerator - log_denominator
return(as.numeric(exp(log_ratio))*(ga-1/ga))
}
H <- function(gamma, nu){
return((nu/(nu-2)) * (gamma^2 - 1 + (1/(gamma^2))) - f(gamma, nu)^2)
}
coef_1 <- function(stand_alpha,gamma_1,nu_1){ # Convert unstandardised alpha
H1 <- H(gamma_1,nu_1)
s2 <- H1/((1/(stand_alpha^2))-1)
return(sqrt(s2))
}
coef_2 <- function(stand_beta,stand_alpha,stand_tau,gamma_1,nu_1,gamma_2,nu_2){ # Convert unstandardised beta
H1 <- H(gamma_1,nu_1)
H2 <- H(gamma_2,nu_2)
alpha <- coef_1(stand_alpha,gamma_1,nu_1)
K <- alpha^2 + H1
l1 <- K*(1-stand_tau^2)/(H2*(stand_beta^2))
l2 <- K/H2
s2 <- 1/(l1-l2)
return(sqrt(s2))
}
coef_tau <- function(stand_beta,stand_tau,gamma_2,nu_2){ # Convert unstandardised tau
H2 <- H(gamma_2,nu_2)
tau <- stand_tau * sqrt(H2/(1 - (stand_tau)^2 - (stand_beta)^2))
return(tau)
}
coef_1(0.14,0.33,3)
coef_1(0.14,0.5,3)
# Generate data under H_1: mediation effect exists (we fix sigma=1)
# Here we only give an example under one simulation setting
# One can change the following parameters for other settings easily
N <- c(50) ## Sample size for each dataset
stand_alpha <- c(0.14) ## Standardised coefficient alpha
stand_beta <- c(0.14) ## Standardised coefficient beta
stand_tau <- c(0.14) ## Standardised coefficient tau
gamma <- c(0.33)
nu <- c(3) # nu = 3, 10; to set normal tail, use "nu = "normal
# Output directory
output_dir <- "../inst/sample_simulation_data_H1"
if (!dir.exists(output_dir)) {
dir.create(output_dir)
}
# Loop parameters
exp_num <- 1000 # The number of simulated datasets
# Generate and save data
for (i in 1:length(N)) {
size <- N[i]
for (j in 1:length(stand_alpha)) {
for (k in 1:length(stand_beta)) {
for (l in 1:length(gamma)) {
for (m in 1:length(nu)) {
for (p in 1:length(stand_tau)){
alpha_val <- coef_1(stand_alpha[j], gamma[l], nu[m])
beta_val <- coef_2(stand_beta[k], stand_alpha[j], stand_tau[p], gamma[l], nu[m], gamma[l], nu[m])
tau_val <- coef_tau(stand_beta[k], stand_tau[p], gamma[l], nu[m])
X <- rnorm(size * exp_num)
e1 <- rmatpt(size * exp_num, gamma[l], nu[m]) # Generate MATPT errors for path X to M
e2 <- rmatpt(size * exp_num, gamma[l], nu[m]) # Generate MATPT errors for path XM to Y
M <- alpha_val * X + e1
Y <- tau_val * X + beta_val * M + e2
exp_data_X <- matrix(X, ncol = exp_num)
exp_data_M <- matrix(M, ncol = exp_num)
exp_data_Y <- matrix(Y, ncol = exp_num)
file_name_X <- paste0("X_N_", size, "_alpha_", stand_alpha[j], "_beta_", stand_beta[k], "_tau_", stand_tau[p], "_gamma_", gamma[l], "_nu_", nu[m], ".csv")
file_name_M <- paste0("M_N_", size, "_alpha_", stand_alpha[j], "_beta_", stand_beta[k], "_tau_", stand_tau[p], "_gamma_", gamma[l], "_nu_", nu[m], ".csv")
file_name_Y <- paste0("Y_N_", size, "_alpha_", stand_alpha[j], "_beta_", stand_beta[k], "_tau_", stand_tau[p], "_gamma_", gamma[l], "_nu_", nu[m], ".csv")
output_subdir <- paste0(output_dir,"N_", size, "_alpha_", stand_alpha[j], "_beta_", stand_beta[k], "_tau_", stand_tau[p], "_gamma_", gamma[l], "_nu_", nu[m], "/")
if (!dir.exists(output_subdir)) {
dir.create(output_subdir)
}
write.csv(exp_data_X, file.path(output_subdir, file_name_X))
write.csv(exp_data_M, file.path(output_subdir, file_name_M))
write.csv(exp_data_Y, file.path(output_subdir, file_name_Y))
}
}
}
}
}
}
# Output directory
output_dir <- "../inst/sample_simulation_data_H1"
if (!dir.exists(output_dir)) {
dir.create(output_dir)
}
# Output directory
output_dir <- "../inst/sample_simulation_data_H1"
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE, showWarnings = FALSE)
}
# Output directory
output_dir <- "../sample_simulation_data_H1"
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE, showWarnings = FALSE)
}
# Loop parameters
exp_num <- 1000 # The number of simulated datasets
# Generate and save data
for (i in 1:length(N)) {
size <- N[i]
for (j in 1:length(stand_alpha)) {
for (k in 1:length(stand_beta)) {
for (l in 1:length(gamma)) {
for (m in 1:length(nu)) {
for (p in 1:length(stand_tau)){
alpha_val <- coef_1(stand_alpha[j], gamma[l], nu[m])
beta_val <- coef_2(stand_beta[k], stand_alpha[j], stand_tau[p], gamma[l], nu[m], gamma[l], nu[m])
tau_val <- coef_tau(stand_beta[k], stand_tau[p], gamma[l], nu[m])
X <- rnorm(size * exp_num)
e1 <- rmatpt(size * exp_num, gamma[l], nu[m]) # Generate MATPT errors for path X to M
e2 <- rmatpt(size * exp_num, gamma[l], nu[m]) # Generate MATPT errors for path XM to Y
M <- alpha_val * X + e1
Y <- tau_val * X + beta_val * M + e2
exp_data_X <- matrix(X, ncol = exp_num)
exp_data_M <- matrix(M, ncol = exp_num)
exp_data_Y <- matrix(Y, ncol = exp_num)
file_name_X <- paste0("X_N_", size, "_alpha_", stand_alpha[j], "_beta_", stand_beta[k], "_tau_", stand_tau[p], "_gamma_", gamma[l], "_nu_", nu[m], ".csv")
file_name_M <- paste0("M_N_", size, "_alpha_", stand_alpha[j], "_beta_", stand_beta[k], "_tau_", stand_tau[p], "_gamma_", gamma[l], "_nu_", nu[m], ".csv")
file_name_Y <- paste0("Y_N_", size, "_alpha_", stand_alpha[j], "_beta_", stand_beta[k], "_tau_", stand_tau[p], "_gamma_", gamma[l], "_nu_", nu[m], ".csv")
output_subdir <- paste0(output_dir,"N_", size, "_alpha_", stand_alpha[j], "_beta_", stand_beta[k], "_tau_", stand_tau[p], "_gamma_", gamma[l], "_nu_", nu[m], "/")
if (!dir.exists(output_subdir)) {
dir.create(output_subdir)
}
write.csv(exp_data_X, file.path(output_subdir, file_name_X))
write.csv(exp_data_M, file.path(output_subdir, file_name_M))
write.csv(exp_data_Y, file.path(output_subdir, file_name_Y))
}
}
}
}
}
}
output_subdir
paste0(output_dir,"/N_", size, "_alpha_", stand_alpha[j], "_beta_", stand_beta[k], "_tau_", stand_tau[p], "_gamma_", gamma[l], "_nu_", nu[m], "/")
# Load the FlexBayesMed package
library(FlexBayesMed)
set.seed(123)
# The following five functions convert standardised coefficients into unstandardised coefficients
# Please refer to Section B in the Supplementary Materials
library(Rmpfr)
f <- function(ga,nu){
nu_mpfr <- mpfr(nu, precBits=512)
log_numerator <- log(2) + log(nu_mpfr) + lgamma((nu_mpfr + 1)/2)
log_denominator <- 0.5 * (log(pi) + log(nu_mpfr)) + log(nu_mpfr - 1) + lgamma(nu_mpfr/2)
log_ratio <- log_numerator - log_denominator
return(as.numeric(exp(log_ratio))*(ga-1/ga))
}
H <- function(gamma, nu){
return((nu/(nu-2)) * (gamma^2 - 1 + (1/(gamma^2))) - f(gamma, nu)^2)
}
coef_1 <- function(stand_alpha,gamma_1,nu_1){ # Convert unstandardised alpha
H1 <- H(gamma_1,nu_1)
s2 <- H1/((1/(stand_alpha^2))-1)
return(sqrt(s2))
}
coef_2 <- function(stand_beta,stand_alpha,stand_tau,gamma_1,nu_1,gamma_2,nu_2){ # Convert unstandardised beta
H1 <- H(gamma_1,nu_1)
H2 <- H(gamma_2,nu_2)
alpha <- coef_1(stand_alpha,gamma_1,nu_1)
K <- alpha^2 + H1
l1 <- K*(1-stand_tau^2)/(H2*(stand_beta^2))
l2 <- K/H2
s2 <- 1/(l1-l2)
return(sqrt(s2))
}
coef_tau <- function(stand_beta,stand_tau,gamma_2,nu_2){ # Convert unstandardised tau
H2 <- H(gamma_2,nu_2)
tau <- stand_tau * sqrt(H2/(1 - (stand_tau)^2 - (stand_beta)^2))
return(tau)
}
# Generate data under H_1: mediation effect exists (we fix sigma=1)
# Here we only give an example under one simulation setting
# One can change the following parameters for other settings easily
N <- c(50) ## Sample size for each dataset
stand_alpha <- c(0.14) ## Standardised coefficient alpha
stand_beta <- c(0.14) ## Standardised coefficient beta
stand_tau <- c(0.14) ## Standardised coefficient tau
gamma <- c(0.33)
nu <- c(3) # nu = 3, 10; to set normal tail, use "nu = "normal
# Output directory
output_dir <- "../sample_simulation_data_H1"
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE, showWarnings = FALSE)
}
# Loop parameters
exp_num <- 1000 # The number of simulated datasets
# Generate and save data
for (i in 1:length(N)) {
size <- N[i]
for (j in 1:length(stand_alpha)) {
for (k in 1:length(stand_beta)) {
for (l in 1:length(gamma)) {
for (m in 1:length(nu)) {
for (p in 1:length(stand_tau)){
alpha_val <- coef_1(stand_alpha[j], gamma[l], nu[m])
beta_val <- coef_2(stand_beta[k], stand_alpha[j], stand_tau[p], gamma[l], nu[m], gamma[l], nu[m])
tau_val <- coef_tau(stand_beta[k], stand_tau[p], gamma[l], nu[m])
X <- rnorm(size * exp_num)
e1 <- rmatpt(size * exp_num, gamma[l], nu[m]) # Generate MATPT errors for path X to M
e2 <- rmatpt(size * exp_num, gamma[l], nu[m]) # Generate MATPT errors for path XM to Y
M <- alpha_val * X + e1
Y <- tau_val * X + beta_val * M + e2
exp_data_X <- matrix(X, ncol = exp_num)
exp_data_M <- matrix(M, ncol = exp_num)
exp_data_Y <- matrix(Y, ncol = exp_num)
file_name_X <- paste0("X_N_", size, "_alpha_", stand_alpha[j], "_beta_", stand_beta[k], "_tau_", stand_tau[p], "_gamma_", gamma[l], "_nu_", nu[m], ".csv")
file_name_M <- paste0("M_N_", size, "_alpha_", stand_alpha[j], "_beta_", stand_beta[k], "_tau_", stand_tau[p], "_gamma_", gamma[l], "_nu_", nu[m], ".csv")
file_name_Y <- paste0("Y_N_", size, "_alpha_", stand_alpha[j], "_beta_", stand_beta[k], "_tau_", stand_tau[p], "_gamma_", gamma[l], "_nu_", nu[m], ".csv")
output_subdir <- paste0(output_dir,"/N_", size, "_alpha_", stand_alpha[j], "_beta_", stand_beta[k], "_tau_", stand_tau[p], "_gamma_", gamma[l], "_nu_", nu[m], "/")
if (!dir.exists(output_subdir)) {
dir.create(output_subdir)
}
write.csv(exp_data_X, file.path(output_subdir, file_name_X))
write.csv(exp_data_M, file.path(output_subdir, file_name_M))
write.csv(exp_data_Y, file.path(output_subdir, file_name_Y))
}
}
}
}
}
}
# Generate data under H_0: mediation effect does not exist (we fix sigma=1)
## Output directory
output_dir <- "../sample_simulation_data_H0"
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE, showWarnings = FALSE)
}
# Nested loops to generate and save data
for (i in 1:length(N)) {
size <- N[i]
for (j in 1:length(stand_alpha)) {
for (k in 1:length(stand_beta)) {
for (l in 1:length(gamma)) {
for (m in 1:length(nu)) {
for (p in 1:length(stand_tau)){
X <- rnorm(size * exp_num)
M <- rep(NA, size * exp_num)
Y <- rep(NA, size * exp_num)
e1 <- rmatpt(size * exp_num, gamma[l], nu[m]) # Generate MATPT errors for path X to M
e2 <- rmatpt(size * exp_num, gamma[l], nu[m]) # Generate MATPT errors for path XM to Y
idx <- sample(c(1,2,3),size = size * exp_num, replace = TRUE) ## We assume equal conditional prior probability for the three cases under H0
group_00 <- which(idx==1)
alpha_val <- coef_1(0, gamma[l], nu[m])
beta_val <- coef_2(0, 0, stand_tau[p], gamma[l], nu[m], gamma[l], nu[m])
tau_val <- coef_tau(0, stand_tau[p], gamma[l], nu[m])
M[group_00] <- alpha_val * X[group_00] + e1[group_00]
Y[group_00] <- tau_val * X[group_00] + beta_val * M[group_00] + e2[group_00]
group_01 <- which(idx==2)
alpha_val <- coef_1(0, gamma[l], nu[m])
beta_val <- coef_2(stand_beta[k], 0, stand_tau[p], gamma[l], nu[m], gamma[l], nu[m])
tau_val <- coef_tau(stand_beta[k], stand_tau[p], gamma[l], nu[m])
M[group_01] <- alpha_val * X[group_01] + e1[group_01]
Y[group_01] <- tau_val * X[group_01] + beta_val * M[group_01] + e2[group_01]
group_10 <- which(idx==3)
alpha_val <- coef_1(stand_alpha[j], gamma[l], nu[m])
beta_val <- coef_2(0, stand_alpha[j], stand_tau[p], gamma[l], nu[m], gamma[l], nu[m])
tau_val <- coef_tau(0, stand_tau[p], gamma[l], nu[m])
M[group_10] <- alpha_val * X[group_10] + e1[group_10]
Y[group_10] <- tau_val * X[group_10] + beta_val * M[group_10] + e2[group_10]
exp_data_X <- matrix(X, ncol = exp_num)
exp_data_M <- matrix(M, ncol = exp_num)
exp_data_Y <- matrix(Y, ncol = exp_num)
# Create unique file names for each matrix
file_name_X <- paste0("X_N_", size, "_alpha_", stand_alpha[j], "_beta_", stand_beta[k], "_tau_", stand_tau[p], "_gamma_", gamma[l], "_nu_", nu[m], ".csv")
file_name_M <- paste0("M_N_", size, "_alpha_", stand_alpha[j], "_beta_", stand_beta[k], "_tau_", stand_tau[p], "_gamma_", gamma[l], "_nu_", nu[m], ".csv")
file_name_Y <- paste0("Y_N_", size, "_alpha_", stand_alpha[j], "_beta_", stand_beta[k], "_tau_", stand_tau[p], "_gamma_", gamma[l], "_nu_", nu[m], ".csv")
# Output directory
output_subdir <- paste0(output_dir,"/N_", size, "_alpha_", stand_alpha[j], "_beta_", stand_beta[k], "_tau_", stand_tau[p], "_gamma_", gamma[l], "_nu_", nu[m], "/")
# Create the output directory if it doesn't exist
if (!dir.exists(output_subdir)) {
dir.create(output_subdir)
}
# Save matrices as CSV files
write.csv(exp_data_X, file.path(output_subdir, file_name_X))
write.csv(exp_data_M, file.path(output_subdir, file_name_M))
write.csv(exp_data_Y, file.path(output_subdir, file_name_Y))
}
}
}
}
}
}
devtools::document()
devtools::check()
devtools::document()
devtools::check()
?flex_med
?flex_mr
devtools::build_manual()
rlang::last_trace()
rlang::last_trace(drop = FALSE)
Sys.which("pdflatex")
devtools::build_manual()
rlang::last_trace()
rlang::last_trace(drop = FALSE)
devtools::document()
devtools::check()
devtools::build_manual()
devtools::document()
devtools::check()
###### Plot the densities of the centred two-piece distribution ######
######           This corresponds to Figure 1           ######
library(FlexBayesMed)
###### Plot the densities of the centred two-piece distribution ######
######           This corresponds to Figure 1           ######
library(FlexBayesMed)
xseq <- seq(-6, 6, length.out = 2001)
# RIght skewed
plot(NA, xlim = range(xseq), ylim = c(0, 0.42),
xlab = "x", ylab = "Density",
main = "")
xseq   <- seq(-6, 6, length.out = 2001)
lines(xseq, dctpt(xseq,gamma=1.5,nu=3), col = "red", lwd = 2.5, lty=5)
lines(xseq, dctpt(xseq,gamma=3,nu=5), col = "darkgreen", lwd = 2.5, lty=2)
lines(xseq, dctpt(xseq,gamma=1.5, nu="normal"), col="royalblue",lwd=2.5,lty=3)
lines(xseq, dctpt(xseq,gamma=3, nu="normal"), col="orange",lwd=2.5,lty=4)
lines(xseq, dnorm(xseq), col="black",lwd=2,lty=1)
legend("topright", inset = 0.04, cex   = 1.14,
legend = c(expression(paste(gamma, " = 1.5, ", nu, " = 3")),
expression(paste(gamma, " = 3,   ", nu, " = 5")),
expression(paste(gamma, " = 1.5, ", nu, " = ", infinity)),
expression(paste(gamma, " = 3,   ", nu, " = ", infinity)),
expression(N(0,1))),
col = c("red", "darkgreen", "royalblue", "orange", "black"),
lty = c(5,2,3,4,1),
lwd = 1,
bty = "n")
# Left Skewed
plot(NA, xlim = range(xseq), ylim = c(0, 0.42),
xlab = "x", ylab = "Density",
main = "")
xseq   <- seq(-6, 6, length.out = 2001)
lines(xseq, dctpt(xseq,gamma=2/3,nu=3), col = "red", lwd = 2.5, lty=5)
lines(xseq, dctpt(xseq,gamma=1/3,nu=5), col = "darkgreen", lwd = 2.5, lty=2)
lines(xseq, dctpt(xseq,gamma=2/3, nu="normal"), col="royalblue",lwd=2.5,lty=3)
lines(xseq, dctpt(xseq,gamma=1/3, nu="normal"), col="orange",lwd=2.5,lty=4)
lines(xseq, dnorm(xseq), col="black",lwd=2,lty=1)
legend("topleft", inset = 0.001, cex   = 1.14,
legend = c(expression(paste(gamma, " = 2/3, ", nu, " = 3")),
expression(paste(gamma, " = 1/3,   ", nu, " = 5")),
expression(paste(gamma, " = 2/3, ", nu, " = ", infinity)),
expression(paste(gamma, " = 1/3,   ", nu, " = ", infinity)),
expression(N(0,1))),
col = c("red", "darkgreen", "royalblue", "orange", "black"),
lty = c(5,2,3,4,1),
lwd = 1,
bty = "n")
######          Plot the Skewness of the CTPT          ######
######           This corresponds to Figure 2           ######
library(FlexBayesMed)
# Fisher
gamma_seq <- seq(0.25, 3, length.out = 200)
## Skewness for nu=5
sk_nu5   <- sapply(gamma_seq, function(g) skewness_ctpt(g, 5))
## Skewness for nu=10
sk_nu10  <- sapply(gamma_seq, function(g) skewness_ctpt(g, 10))
## Skewness for two-piece normal
sk_infty <- sapply(gamma_seq, function(g) skewness_ctpt(g, "normal"))
plot(gamma_seq, sk_nu5,
type = "l",
col = "blue", lwd = 2.5, lty=1,
ylim = range(c(sk_nu5, sk_nu10, sk_infty)),
xlab = expression(gamma),
ylab = expression(paste("SK(X|",gamma,",",nu,")")),
main = "")
lines(gamma_seq, sk_nu10, col = "red",  lty=2, lwd = 2.5)
lines(gamma_seq, sk_infty, col = "darkgreen", lty=3, lwd = 2.5)
legend("bottomright",cex=1.2, inset=0.04,
legend = c(expression(nu==5), expression(nu==10), expression(nu==infinity)),
col = c("blue", "red", "darkgreen"), lty = c(1,2,3), lwd = 2.5,
bty = "n")
##################################
###   Case Study (Section 6)   ###
##################################
library(e1071)
# Load the data
data <- read.table(file="C:/Users/Li/Downloads/rdata.txt", header=TRUE)
# Check the OLS residual
x <- data$ME
m <- data$HE
y <- data$math
reg1 <- lm(m~x)
summary(reg1)
kurtosis(reg1$residuals)
skewness(reg1$residuals)
qqnorm(reg1$residuals)
qqline(reg1$residuals,col="red")
reg2 <- lm(y~x+m)
summary(reg2)
kurtosis(reg2$residuals)
skewness(reg2$residuals)
qqnorm(reg2$residuals)
qqline(reg2$residuals,col="red")
library(FlexBayesMed)
# FIt the Full Model
fit_full <- flex_med(X=x, M=m, Y=y, model="full", iter = 30000, refresh = 3000,
warmup = 6000, chains = 1, seed = 123)
summary(fit_full$X2M_with_alpha)
fit_full$X2M_with_alpha
# FIt the Full Model
fit_full <- flex_med(X=x, M=m, Y=y, model="full", iter = 6000, refresh = 1000,
warmup = 1000, chains = 1, seed = 123)
fit_full$X2M_with_alpha
devtools::check()
devtools::build_manual()
devtools::build_manual()
